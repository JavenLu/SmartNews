package javen.example.com.smartnews.main.fragment.home.bean.top_news;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_CHANNEL_BEAN".
*/
public class NewsChannelBeanDao extends AbstractDao<NewsChannelBean, Long> {

    public static final String TABLENAME = "NEWS_CHANNEL_BEAN";

    /**
     * Properties of entity NewsChannelBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NewsChannelName = new Property(1, String.class, "newsChannelName", false, "NEWS_CHANNEL_NAME");
        public final static Property NewsChannelId = new Property(2, String.class, "newsChannelId", false, "NEWS_CHANNEL_ID");
        public final static Property NewsChannelType = new Property(3, String.class, "newsChannelType", false, "NEWS_CHANNEL_TYPE");
        public final static Property NewsChannelSelect = new Property(4, boolean.class, "newsChannelSelect", false, "NEWS_CHANNEL_SELECT");
        public final static Property NewsChannelIndex = new Property(5, int.class, "newsChannelIndex", false, "NEWS_CHANNEL_INDEX");
        public final static Property NewsChannelFixed = new Property(6, Boolean.class, "newsChannelFixed", false, "NEWS_CHANNEL_FIXED");
    }


    public NewsChannelBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewsChannelBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_CHANNEL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NEWS_CHANNEL_NAME\" TEXT," + // 1: newsChannelName
                "\"NEWS_CHANNEL_ID\" TEXT," + // 2: newsChannelId
                "\"NEWS_CHANNEL_TYPE\" TEXT," + // 3: newsChannelType
                "\"NEWS_CHANNEL_SELECT\" INTEGER NOT NULL ," + // 4: newsChannelSelect
                "\"NEWS_CHANNEL_INDEX\" INTEGER NOT NULL ," + // 5: newsChannelIndex
                "\"NEWS_CHANNEL_FIXED\" INTEGER);"); // 6: newsChannelFixed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_CHANNEL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsChannelBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String newsChannelName = entity.getNewsChannelName();
        if (newsChannelName != null) {
            stmt.bindString(2, newsChannelName);
        }
 
        String newsChannelId = entity.getNewsChannelId();
        if (newsChannelId != null) {
            stmt.bindString(3, newsChannelId);
        }
 
        String newsChannelType = entity.getNewsChannelType();
        if (newsChannelType != null) {
            stmt.bindString(4, newsChannelType);
        }
        stmt.bindLong(5, entity.getNewsChannelSelect() ? 1L: 0L);
        stmt.bindLong(6, entity.getNewsChannelIndex());
 
        Boolean newsChannelFixed = entity.getNewsChannelFixed();
        if (newsChannelFixed != null) {
            stmt.bindLong(7, newsChannelFixed ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsChannelBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String newsChannelName = entity.getNewsChannelName();
        if (newsChannelName != null) {
            stmt.bindString(2, newsChannelName);
        }
 
        String newsChannelId = entity.getNewsChannelId();
        if (newsChannelId != null) {
            stmt.bindString(3, newsChannelId);
        }
 
        String newsChannelType = entity.getNewsChannelType();
        if (newsChannelType != null) {
            stmt.bindString(4, newsChannelType);
        }
        stmt.bindLong(5, entity.getNewsChannelSelect() ? 1L: 0L);
        stmt.bindLong(6, entity.getNewsChannelIndex());
 
        Boolean newsChannelFixed = entity.getNewsChannelFixed();
        if (newsChannelFixed != null) {
            stmt.bindLong(7, newsChannelFixed ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewsChannelBean readEntity(Cursor cursor, int offset) {
        NewsChannelBean entity = new NewsChannelBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // newsChannelName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // newsChannelId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // newsChannelType
            cursor.getShort(offset + 4) != 0, // newsChannelSelect
            cursor.getInt(offset + 5), // newsChannelIndex
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // newsChannelFixed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsChannelBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsChannelName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNewsChannelId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNewsChannelType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNewsChannelSelect(cursor.getShort(offset + 4) != 0);
        entity.setNewsChannelIndex(cursor.getInt(offset + 5));
        entity.setNewsChannelFixed(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsChannelBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsChannelBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsChannelBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
